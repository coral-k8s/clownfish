name: Release

permissions:
  contents: write

on:
  push:
    tags:
      - v[0-9]+.*

jobs:
  check-release-type:
    runs-on: ubuntu-latest
    outputs:
      is_prerelease: ${{ steps.check_tag.outputs.is_prerelease }}
    steps:
      - name: Check tag type
        id: check_tag
        run: |
          if [[ "${{ github.ref_name }}" =~ -rc|-alpha|-beta|dev ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi

  create-release:
    needs: [check-release-type]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Read CHANGELOG.md
        id: changelog
        shell: bash
        run: |
          CHANGELOG=$(cat CHANGELOG.md)
          echo "CHANGELOG<<EOFMARKER" >> $GITHUB_ENV
          echo "$CHANGELOG" >> $GITHUB_ENV
          echo "EOFMARKER" >> $GITHUB_ENV
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          prerelease: ${{ needs.check-release-type.outputs.is_prerelease }}
          generate_release_notes: false
          body: |
            ${{ env.CHANGELOG }}
          token: ${{ secrets.GITHUB_TOKEN }}

  upload-assets:
    needs: create-release
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      - name: Install Linux dependencies
        if: contains(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y libx11-dev libxcb1-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev pkg-config libxkbcommon-dev libxkbcommon-x11-dev libxcb-xkb-dev libx11-xcb-dev
      - name: Setup for cross-compilation
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          sudo apt-get install -y libx11-dev:arm64 libxcb1-dev:arm64 libxcb-render0-dev:arm64 libxcb-shape0-dev:arm64 libxcb-xfixes0-dev:arm64 libxkbcommon-dev:arm64 libxkbcommon-x11-dev:arm64 libxcb-xkb-dev:arm64 libx11-xcb-dev:arm64
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}
      - name: Verify binary was built
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            if [ ! -f "target/${{ matrix.target }}/release/clownfish.exe" ]; then
              echo "Binary not found at expected location!"
              exit 1
            fi
          else
            if [ ! -f "target/${{ matrix.target }}/release/clownfish" ]; then
              echo "Binary not found at expected location!"
              exit 1
            fi
          fi
      - uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: clownfish
          target: ${{ matrix.target }}
          token: ${{ secrets.GITHUB_TOKEN }}
          checksum: sha256
          tar: unix
          zip: windows

  publish-release:
    needs: [upload-assets, check-release-type]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: ${{ needs.check-release-type.outputs.is_prerelease }}
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ github.ref_name }}
